// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(IncidenciasContext))]
    partial class IncidenciasContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CardinalSuffix")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CardsSuffix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("IdPerson")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Letter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("SecondaryRoadLetter")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("SecondaryRoadNumber")
                        .HasColumnType("int");

                    b.Property<string>("ViaType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.City", b =>
                {
                    b.Property<string>("IdCity")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IdDepartment")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCity");

                    b.HasIndex("IdDepartment");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Country", b =>
                {
                    b.Property<string>("IdCountry")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdCountry");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Department", b =>
                {
                    b.Property<string>("IdDepartment")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IdCountry")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdDepartment");

                    b.HasIndex("IdCountry");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Person", b =>
                {
                    b.Property<string>("IdPerson")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IdCity")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<int>("IdGenre")
                        .HasColumnType("int");

                    b.Property<int>("IdTypePerson")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPerson");

                    b.HasIndex("IdCity");

                    b.HasIndex("IdGenre");

                    b.HasIndex("IdTypePerson");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.TrainerCourse", b =>
                {
                    b.Property<string>("IdPerson")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("IdPerson", "IdCourse");

                    b.HasIndex("IdCourse");

                    b.ToTable("TrainerCourse", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Tuition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCourse")
                        .HasColumnType("int");

                    b.Property<string>("IdPerson")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IdCourse");

                    b.HasIndex("IdPerson");

                    b.ToTable("Tuition", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.TypePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypePerson", (string)null);
                });

            modelBuilder.Entity("Domain.Entitites.Address", b =>
                {
                    b.HasOne("Domain.Entitites.Person", "People")
                        .WithMany("Addresses")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entitites.City", b =>
                {
                    b.HasOne("Domain.Entitites.Department", "Departments")
                        .WithMany("Cities")
                        .HasForeignKey("IdDepartment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entitites.Department", b =>
                {
                    b.HasOne("Domain.Entitites.Country", "Countries")
                        .WithMany("Departments")
                        .HasForeignKey("IdCountry")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Domain.Entitites.Person", b =>
                {
                    b.HasOne("Domain.Entitites.City", "Cities")
                        .WithMany("People")
                        .HasForeignKey("IdCity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genre", "Genders")
                        .WithMany("People")
                        .HasForeignKey("IdGenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.TypePerson", "TypePeople")
                        .WithMany("People")
                        .HasForeignKey("IdTypePerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("Genders");

                    b.Navigation("TypePeople");
                });

            modelBuilder.Entity("Domain.Entitites.TrainerCourse", b =>
                {
                    b.HasOne("Domain.Entitites.Course", "Courses")
                        .WithMany("TrainerCourses")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Person", "People")
                        .WithMany("TrainerCourses")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entitites.Tuition", b =>
                {
                    b.HasOne("Domain.Entitites.Course", "Courses")
                        .WithMany("Tuitions")
                        .HasForeignKey("IdCourse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entitites.Person", "People")
                        .WithMany("Tuitions")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entities.Genre", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entitites.City", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("Domain.Entitites.Country", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Domain.Entitites.Course", b =>
                {
                    b.Navigation("TrainerCourses");

                    b.Navigation("Tuitions");
                });

            modelBuilder.Entity("Domain.Entitites.Department", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entitites.Person", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("TrainerCourses");

                    b.Navigation("Tuitions");
                });

            modelBuilder.Entity("Domain.Entitites.TypePerson", b =>
                {
                    b.Navigation("People");
                });
#pragma warning restore 612, 618
        }
    }
}
